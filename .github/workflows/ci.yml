name: CI

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    name: ${{ matrix.platform }} (${{ matrix.python-version }})
    runs-on: ${{ matrix.platform }}
    env:
      DROPBOX_TOKEN: ${{ secrets.DROPBOX_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]
        platform: [macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install dropbox

      # - uses: actions/cache@v2
      #   id: cache
      #   with:
      #     path: /tests/data
      #     key: ${{ hashFiles('scripts/download_samples.py') }}

      - name: Download Samples
        # if: steps.cache.outputs.cache-hit != 'true'
        run: python scripts/download_samples.py

      - name: Download SDK
        run: python scripts/download_sdk.py

      - name: Build
        run: pip install .[testing]

      - name: Test
        run: pytest -v --cov=nd2 --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2


  build:
    name: build py3.${{ matrix.python-version }} on ${{ matrix.platform || matrix.os }}
    # needs: [test]
    # if: "success() && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')"
    strategy:
      fail-fast: false
      matrix:
        os: [macos, windows]
        python-version: ["7", "8", "9"]
        include:
          # - os: ubuntu
            # platform: linux
          - os: windows
            ls: dir

    runs-on: ${{ format('{0}-latest', matrix.os) }}
    steps:
      - uses: actions/checkout@v2

      - name: Download SDK
        run: python scripts/download_sdk.py
        env:
          DROPBOX_TOKEN: ${{ secrets.DROPBOX_TOKEN }}

      - name: set up python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: install
        run: pip install -U twine setuptools wheel cibuildwheel

      - name: build sdist
        if: matrix.os == 'macos' && matrix.python-version == '9'
        run: python setup.py sdist bdist_wheel
        env:
          SKIP_CYTHON: 1

      - name: build ${{ matrix.platform || matrix.os }} binaries
        run: cibuildwheel --output-dir dist
        env:
          PIP: "pip"
          CIBW_BUILD: "cp3${{ matrix.python-version }}-*"
          CIBW_SKIP: "*-win32"
          CIBW_PLATFORM: "${{ matrix.platform || matrix.os }}"
          CIBW_BEFORE_BUILD: "pip install -U cython"
          CIBW_TEST_REQUIRES: "pytest cython dask[array] xarray"
          CIBW_TEST_COMMAND: "pytest {project}/tests"
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"
          CIBW_MANYLINUX_I686_IMAGE: "manylinux2014"

      - name: list dist files
        run: |
          ${{ matrix.ls || 'ls -lh' }} dist/
          twine check dist/*

      - name: Store dist artifacts
        uses: actions/upload-artifact@v2
        with:
          name: pypi_files
          path: dist

  deploy:
    name: Deploy
    # needs: test
    # if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: get dist artifacts
        uses: actions/download-artifact@v2
        with:
          name: pypi_files
          path: dist

      - name: install
        run: pip install -U twine

      - name: twine check
        run: |
          twine check dist/*
          ls -lh dist

      # - name: Build and publish
      #   run: twine upload dist/*
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
